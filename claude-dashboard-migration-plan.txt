# 📊 ダッシュボードメイン画面化計画書

## 🎯 プロジェクト概要
現在の`analytics.html`（進捗管理ダッシュボード）を新しいメイン画面として統合し、
既存の`index.html`の機能と融合させて、一画面で全機能にアクセス可能な統合ダッシュボードを構築する。

## 📋 現状分析

### 現在のファイル構成
- **index.html**: メイン画面（アコーディオンメニュー、分析ボタン）
- **analytics.html**: ダッシュボード（分析機能、進捗マトリクス表）
- **details.html**: 事業者詳細・編集画面

### 移行対象要素
1. **進捗マトリクス表** (analytics.html内)
2. **アコーディオンメニュー** (index.html内)
   - 🔗 その他アプリ
   - 🎛️ 管理メニュー
3. **編集機能へのアクセス**
4. **ログイン機能**

## 🗺️ 実装計画

### フェーズ1: 進捗マトリクス表の拡張 ⭐ 最優先
**対象ファイル**: `analytics.html`
**実装内容**:
1. **ID列の追加**
   - クライアントIDを表示する列を追加
   - 既存のマトリクス表の最左側に配置

2. **経理方式列の追加**
   - 「自計」「記帳代行」の2種類を表示
   - ID列の隣に配置

3. **編集ボタン列の追加**
   - 各行に「✏️ 編集」ボタンを配置
   - クリックで`details.html?id={client_id}`に遷移
   - マトリクス表の最右側に配置

**技術実装**:
```javascript
// マトリクス表のヘッダーに列追加
const headers = ['ID', '経理方式', '事業者名', ...existing_headers, '編集'];

// 各行にデータ追加
rows.forEach(client => {
    const editButton = `<button onclick="editClient(${client.id})"
                       class="edit-btn">✏️ 編集</button>`;
    // 行データに追加
});
```

### フェーズ2: アコーディオンメニューの移設 ⭐ 高優先
**対象ファイル**: `analytics.html`
**実装内容**:
1. **ヘッダーレイアウトの変更**
   - 現在: `[📈 進捗管理ダッシュボード] -------- [👥 担当者別パフォーマンス] [← メイン画面に戻る]`
   - 変更後: `[📈 進捗管理ダッシュボード] [👥 担当者別パフォーマンス] ---- [🔗 その他アプリ] [🎛️ 管理メニュー]`

2. **アコーディオンメニューの移植**
   - `index.html`の両アコーディオンをコピー
   - `analytics.html`の右上に配置
   - 「← メイン画面に戻る」ボタンを削除

3. **CSS調整**
   - ヘッダーのflexboxレイアウト調整
   - アコーディオンの位置調整

### フェーズ3: ログイン画面の更新 ⭐ 中優先
**対象ファイル**: `login.html` (推定)
**実装内容**:
1. **ログイン成功時のリダイレクト先変更**
   - 現在: `index.html`
   - 変更後: `analytics.html`

2. **ロゴ・タイトルの調整**
   - 新しいメイン画面に合わせてブランディング更新

### フェーズ4: 旧メイン画面の整理 ⭐ 低優先
**対象ファイル**: `index.html`
**実装内容**:
1. **ファイル名変更**
   - `index.html` → `old-index.html` (バックアップ)
   - `analytics.html` → `index.html` (新メイン)

2. **不要要素の削除**
   - 分析ボタンの削除
   - リダイレクト機能の実装（必要に応じて）

## 🏗️ 詳細設計

### 新しいメイン画面レイアウト
```
┌─────────────────────────────────────────────────────────────┐
│ 📈 進捗管理ダッシュボード [👥 担当者パフォーマンス] [🔗][🎛️] │
├─────────────────────────────────────────────────────────────┤
│ 🔍 フィルター & アクション                               │
│ [期間] [担当者] [決算月] [事業者名] [🔄クリア] [📊グラフ] [📊エクスポート] │
├─────────────────────────────────────────────────────────────┤
│ 📊 集計結果サマリー & 週次進捗推移 (折りたたみ可能)          │
│ ┌─────────────────┐ ┌─────────────────────────────────────┐ │
│ │ サマリーカード群  │ │ 週次進捗チャート                    │ │
│ │ ・進捗率        │ │ ・線グラフ + 棒グラフ               │ │
│ │ ・完了/未完了   │ │ ・時系列データ                     │ │
│ └─────────────────┘ └─────────────────────────────────────┘ │
├─────────────────────────────────────────────────────────────┤
│ 📋 進捗マトリクス表                                      │
│ [ID][経理方式][事業者名][4月][5月]...[翌3月][編集]           │
│ [ 1][自計   ][○○会社 ][✅][❌]...[⚠️ ][✏️]              │
│ [ 2][記帳代行][××商店 ][✅][✅]...[✅ ][✏️]              │
└─────────────────────────────────────────────────────────────┘
```

### 進捗マトリクス表の新構造
```javascript
const matrixHeaders = [
    'ID',           // 新規追加
    '経理方式',      // 新規追加
    '事業者名',
    '4月', '5月', '6月', '7月', '8月', '9月',
    '10月', '11月', '12月', '1月', '2月', '3月',
    '編集'          // 新規追加
];
```

## ⚙️ 技術仕様

### データ取得の拡張
```javascript
// 既存のクライアントデータに加えて以下を取得
const clientData = {
    id: client.id,                    // 新規: ID
    accounting_method: client.accounting_method,  // 新規: 経理方式
    name: client.name,
    // ...既存フィールド
};
```

### 編集ボタンの実装
```javascript
function editClient(clientId) {
    window.location.href = `details.html?id=${clientId}`;
}
```

### アコーディオンメニューのイベント処理
```javascript
// index.htmlから移植
document.getElementById('manage-staff-button').addEventListener('click', () => {
    window.location.href = 'staff-management.html';
});
// 他のメニュー項目も同様
```

## 📅 実装スケジュール

### 第1週: フェーズ1実装
- [ ] ID列の追加
- [ ] 経理方式列の追加
- [ ] 編集ボタン列の追加
- [ ] 動作テスト

### 第2週: フェーズ2実装
- [ ] ヘッダーレイアウト変更
- [ ] アコーディオンメニュー移植
- [ ] CSS調整
- [ ] 統合テスト

### 第3週: フェーズ3-4実装
- [ ] ログイン画面更新
- [ ] ファイル整理
- [ ] 最終テスト
- [ ] ドキュメント更新

## 🧪 テスト計画

### 機能テスト
- [ ] 進捗マトリクス表の新列表示確認
- [ ] 編集ボタンの遷移確認
- [ ] アコーディオンメニューの動作確認
- [ ] フィルター機能の継続動作確認
- [ ] グラフ表示/非表示の動作確認

### レスポンシブテスト
- [ ] モバイル表示確認
- [ ] タブレット表示確認
- [ ] デスクトップ表示確認

### ブラウザ互換性テスト
- [ ] Chrome
- [ ] Firefox
- [ ] Safari
- [ ] Edge

## 🚨 リスク管理

### 潜在リスク
1. **データ量増加**: マトリクス表の列追加により表示が重くなる可能性
2. **UI複雑化**: 一画面の情報量増加によるUX悪化
3. **既存機能影響**: 移行過程での既存機能への影響

### 対策
1. **パフォーマンス**: 必要に応じて仮想スクロール実装
2. **UX**: 折りたたみ機能でセクション単位の表示制御
3. **バックアップ**: 各フェーズ前に現行バージョンのバックアップ

## 📝 追加検討事項

### 将来の拡張性
- ダッシュボードのカスタマイズ機能
- ユーザー権限による表示制御
- 新しい分析機能の追加

### ユーザビリティ向上
- キーボードショートカット
- 検索機能の強化
- エクスポート機能の拡張

---

**作成日**: 2025-09-17
**作成者**: Claude Code
**ステータス**: 計画承認待ち