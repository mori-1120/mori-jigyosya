\*\*「リンクプレビュー」**や**「ホバーカード」\*\*と呼ばれるものです。

これは、ユーザーがリンクの上にマウスカーソルを乗せると、その場でリンク先のページのタイトル、概要、サムネイル画像などが小さなカードとして表示される機能です。Wikipediaのリンクでよく見られる、非常にモダンで便利なUI（ユーザーインターフェース）です。

ユーザーはページを移動する前に「このリンクは本当に自分が見たいものか？」を判断できるため、ユーザー体験（UX）が大きく向上します。

-----

### どうやって実装するのか？

この機能は、HTML、CSS、そしてJavaScriptを組み合わせて実現します。特に**JavaScriptが中心的な役割**を果たします。

#### 処理の大きな流れ

1.  **ホバーを検知**: ユーザーが特定のリンクの上にマウスカーソルを乗せたこと（`mouseenter`イベント）をJavaScriptが検知します。
2.  **リンク先情報を取得**: JavaScriptが、リンクのURLをもとに、**裏方のサーバー**に「このページの情報をください」とリクエストを送ります。
3.  **メタデータを抽出**: リクエストを受け取ったサーバーが、身代わりとなってリンク先のWebページにアクセスし、そのページのHTMLから必要な情報（`<title>`タグや`<meta>`タグなど）を抜き出します。
4.  **情報を返却**: サーバーが抜き出したタイトル、概要、画像URLなどをJSON形式でJavaScriptに返します。
5.  **カードを表示**: JavaScriptは受け取った情報を使って、プレビュー用のカード（HTMLの`<div>`要素など）を動的に作成し、マウスカーソルの近くに表示します。
6.  **ホバーが外れたら隠す**: ユーザーがマウスカーソルをリンクから離したこと（`mouseleave`イベント）を検知し、表示したカードを非表示にします。

#### なぜ「裏方のサーバー」が必要なのか？ (CORS)

ここで重要なのは、**JavaScriptが直接外部のWebサイトの情報を取得することは、セキュリティ上の理由（CORSポリシー）で通常は禁止されている**という点です。そのため、一度自前のサーバーを経由して情報を取得する必要があります。

-----

### 簡単な実装サンプル

以下に、この仕組みの概念を示すためのコードサンプルを記載します。

#### 1\. HTML

プレビューを表示させたいリンクと、プレビューカードの骨組みを用意します。

```html
<p>
  この記事は<a href="https://www.nhk.or.jp/" class="preview-link">NHKの公式サイト</a>を参考にしています。
</p>

<div id="preview-card">
  <img id="preview-image" src="" alt="プレビュー画像">
  <h4 id="preview-title"></h4>
  <p id="preview-description"></p>
</div>
```

#### 2\. CSS

プレビューカードの見た目を整えます。

```css
#preview-card {
  display: none; /* 最初は非表示 */
  position: absolute; /* マウスに追従させるため */
  border: 1px solid #ccc;
  box-shadow: 0 2px 8px rgba(0,0,0,0.15);
  background-color: white;
  width: 300px;
  padding: 10px;
  border-radius: 8px;
  z-index: 100; /* 他の要素より手前に表示 */
}
#preview-card img {
  width: 100%;
  height: auto;
}
```

#### 3\. JavaScript (クライアント側)

イベントの検知と、サーバーへの問い合わせを行います。

```javascript
document.addEventListener('DOMContentLoaded', () => {
  const links = document.querySelectorAll('.preview-link');
  const card = document.getElementById('preview-card');
  const cardTitle = document.getElementById('preview-title');
  const cardDesc = document.getElementById('preview-description');
  const cardImage = document.getElementById('preview-image');

  links.forEach(link => {
    link.addEventListener('mouseenter', async (e) => {
      // リンク先のURLを取得
      const targetUrl = link.href;

      // 自分のサーバーに情報を問い合わせる
      // (実際にはこのようなAPIエンドポイントを自分で作成する必要があります)
      try {
        const response = await fetch(`/api/get-metadata?url=${encodeURIComponent(targetUrl)}`);
        const data = await response.json();

        // カードに情報を設定
        cardTitle.textContent = data.title;
        cardDesc.textContent = data.description;
        cardImage.src = data.image;
        
        // カードをマウスの位置に表示
        card.style.left = `${e.pageX + 10}px`;
        card.style.top = `${e.pageY + 10}px`;
        card.style.display = 'block';

      } catch (error) {
        console.error('プレビューの取得に失敗しました:', error);
      }
    });

    link.addEventListener('mouseleave', () => {
      // マウスが離れたらカードを非表示にする
      card.style.display = 'none';
    });
  });
});
```

この方法は少し高度な実装が必要になりますが、実現できれば非常に使いやすいWebアプリになります。また、こうした機能を簡単に実装するための**外部ライブラリやサービス**（例えば [Microlink](https://microlink.io/) など）も存在します。